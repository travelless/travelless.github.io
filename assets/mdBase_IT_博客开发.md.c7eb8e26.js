import{_ as a,o as s,c as e,O as n}from"./chunks/framework.1eb88449.js";const t="/assets/image-20230510124528510.8c2a45a2.png",p="/assets/image-20230510133921211.8b5aa591.png",l="/assets/image-20230510134734677.ba11295e.png",b=JSON.parse('{"title":"","description":"","frontmatter":{"intro":"本博客是基于vitepress开发的静态页面。本文将介绍在博客开发过程中碰到的一些问题，并会系统讲解我魔改出来的vitepress的目录结构。"},"headers":[],"relativePath":"mdBase/IT/博客开发.md","lastUpdated":1684519507000}'),o={name:"mdBase/IT/博客开发.md"},i=n(`<h2 id="一、博客框架" tabindex="-1">一、博客框架 <a class="header-anchor" href="#一、博客框架" aria-label="Permalink to &quot;一、博客框架&quot;">​</a></h2><p>​ 本博客是基于<code>vitepress</code>开发的静态页面。</p><p>​ <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">vitepress</a> -- 基于<code>vite</code> <code>Vue3</code> 驱动的静态站点生成器。它允许在<code>md</code>格式文件中使用<code>vue3</code>语法。</p><h2 id="二、博客目录解析" tabindex="-1">二、博客目录解析 <a class="header-anchor" href="#二、博客目录解析" aria-label="Permalink to &quot;二、博客目录解析&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─docs						------  博客主体</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─index.md						------  博客入口文件</span></span>
<span class="line"><span style="color:#A6ACCD;">|  |     ├─dist								------打包后的项目文件（部署文件）</span></span>
<span class="line"><span style="color:#A6ACCD;">|  |     ├─theme							------博客style</span></span>
<span class="line"><span style="color:#A6ACCD;">|  |     ├─config.js						------vitepress配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─.vitepress						------  博客配置文件及主页内容</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─public							------  公共资源 储存图片、视频、音频等</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─navigate						------  导航页内容</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─mdBase							------  md文档存放处</span></span>
<span class="line"><span style="color:#A6ACCD;">├─.gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">├─package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├─yarn.lock</span></span></code></pre></div><p>本博客实现了自动通过fileTree来渲染页面的功能，主要分为两个部分：</p><h3 id="navigate页面博客分类实现" tabindex="-1">Navigate页面博客分类实现 <a class="header-anchor" href="#navigate页面博客分类实现" aria-label="Permalink to &quot;Navigate页面博客分类实现&quot;">​</a></h3><p>博客在页面渲染前将首先获取 /docs/mdBase 目录下的文件结构，根据文件结构来渲染页面。</p><p>例如mdBase 目录文件结构如下</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─mdBase</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─daily</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─IT</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─os</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─todo</span></span></code></pre></div><p>获取mdBase 下的一级目录 <code>daily</code> <code>IT</code> <code>os</code> <code>todo</code> ，然后渲染在Navigate 页面中，效果如下。</p><p><img src="`+t+`" alt="image-20230510124528510"></p><p>fileTree的分类功能是在<code>dev</code>或<code>build</code>指令时触发的，我们直接在mdBase下创建一个新的目录名为 <code>linux</code>，则需要重新<code>dev</code>启动博客，此时目录结构为</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─mdBase</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─daily</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─IT</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─os</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─todo</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─linux</span></span></code></pre></div><p>效果如下</p><p><img src="`+p+`" alt="image-20230510133921211"></p><h3 id="博客页面侧边栏实现" tabindex="-1">博客页面侧边栏实现 <a class="header-anchor" href="#博客页面侧边栏实现" aria-label="Permalink to &quot;博客页面侧边栏实现&quot;">​</a></h3><p>获取各个分支下的目录结构，根据md文档来渲染页面</p><p>例如IT 目录文件结构如下</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─IT</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─image     //存放图片资源</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─index.md</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─全栈开发.md</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─博客开发.md</span></span>
<span class="line"><span style="color:#A6ACCD;">|  ├─serverless.md</span></span></code></pre></div><p>效果如下</p><p><img src="`+l+'" alt="image-20230510134734677"></p><p>因为每个blog分类的主页面是<code>index.md</code> ，渲染后有些不好看。所以在渲染过程中博客会自动进行一些处理，将index的名字处理为分类名，例如IT分类下的index也是IT。</p><h2 id="三、问题与思考" tabindex="-1">三、问题与思考 <a class="header-anchor" href="#三、问题与思考" aria-label="Permalink to &quot;三、问题与思考&quot;">​</a></h2><h3 id="本地图片渲染" tabindex="-1">本地图片渲染 <a class="header-anchor" href="#本地图片渲染" aria-label="Permalink to &quot;本地图片渲染&quot;">​</a></h3><p>vitepress的本地图片渲染是个问题，例如当希望博客中渲染一些图片时，你写入的实际上是一段字符串，其中包含了截图的路径，当图片在本地存储时，该路径就是存储图片的绝对路径。例如</p><p><code>![image-20230510135902147](C:\\Users\\A123\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230510135902147.png)</code></p><p>md格式文件会自动解析这一串字符串，并到对应路径寻找图片，随后渲染到博客上。</p><p>但当我们真正部署博客时，博客是不太可能回到你本人的主机上寻找该绝对路径的图片的，因此想要在vitepress中渲染图片，就必须将本地图片保存在项目中。</p><p>我的解决方案是在分类下创建image目录来存放图片资源。</p><p>例如IT目录中的image文件夹（或是vitepress提供的public目录）就是用来存放待渲染的本地图片资源的。</p><p>但如果每次希望渲染图片都需要先将图片复制到image目录下，再手动配置路径，这一番操作未免太过麻烦。</p><h4 id="目前有两种优化方案-但暂未施行" tabindex="-1">目前有两种优化方案，但暂未施行 <a class="header-anchor" href="#目前有两种优化方案-但暂未施行" aria-label="Permalink to &quot;目前有两种优化方案，但暂未施行&quot;">​</a></h4><ol><li>利用vitepress提供的hook，即dev或build时，在解析md文档格式前，先对博客内容进行一遍预处理：首先寻找到md文档内的图片格式字符串，解析出其中的绝对路径，将绝对路径下的图片复制到image目录下，然后更改md文档中图片格式字符串的路径，设想改为 <code>![name](./image/name)</code>。完成自动化渲染。</li><li>后端提供图片资源。</li></ol><h4 id="方案分析" tabindex="-1">方案分析 <a class="header-anchor" href="#方案分析" aria-label="Permalink to &quot;方案分析&quot;">​</a></h4><p>方案1：该处理方式的可行性较高，但性能较差，例如若某博客内全部都是非本地的图片资源，则该方案就是在白白遍历一遍所有的blog并将网上的图片资源下载到本地，浪费空间和时间。</p><p>方案2：暂不考虑后端服务，但可以考虑应用serverless服务提供图片资源。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="四、博客部署" tabindex="-1">四、博客部署 <a class="header-anchor" href="#四、博客部署" aria-label="Permalink to &quot;四、博客部署&quot;">​</a></h2><p>​ 我将博客部署于<code>github page</code>上。</p><p>​ <code>github page</code>是<code>github</code>为用户提供的静态资源管理管理站点，你可以将你的静态页面（例如个人博客）免费部署在这里。</p><p>​ 你也可以为你的站点添加域名，例如我为我的博客绑定了域名 <code>firstmeet.store</code> ，你可以通过这个网址访问我的博客。</p><p>​ 具体的部署和域名绑定操作，请前往<a href="https://pages.github.com/" target="_blank" rel="noreferrer">github官方</a>查看。</p>',43),c=[i];function r(d,h,m,C,g,A){return s(),e("div",null,c)}const y=a(o,[["render",r]]);export{b as __pageData,y as default};
