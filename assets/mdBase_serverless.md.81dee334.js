import{_ as e,o as a,c as s,V as r}from"./chunks/framework.069143a0.js";const p=JSON.parse('{"title":"serverless","description":"","frontmatter":{"title":"serverless","tags":["serverless","前沿技术"],"date":"2023-07-23","intro":"serverless框架的了解和学习记录"},"headers":[],"relativePath":"mdBase/serverless.md","lastUpdated":1692128822000}'),l={name:"mdBase/serverless.md"},t=r('<h2 id="初识serverless框架" tabindex="-1">初识serverless框架 <a class="header-anchor" href="#初识serverless框架" aria-label="Permalink to &quot;初识serverless框架&quot;">​</a></h2><h3 id="_1、通过serverless文档、一些技术博客和视频了解该框架" tabindex="-1">1、通过serverless文档、一些技术博客和视频了解该框架 <a class="header-anchor" href="#_1、通过serverless文档、一些技术博客和视频了解该框架" aria-label="Permalink to &quot;1、通过serverless文档、一些技术博客和视频了解该框架&quot;">​</a></h3><ul><li><a href="https://www.cnblogs.com/gezp/p/13354180.html" target="_blank" rel="noreferrer">看懂 Serverless，这一篇就够了</a></li><li><a href="https://www.bilibili.com/video/BV1RD4y1n7tL?p=1&amp;vd_source=643340c2f44b473b11977cd9c50cb771" target="_blank" rel="noreferrer">玩转 Serverless 架构</a></li></ul><h3 id="_2、serverless的概念整理" tabindex="-1">2、serverless的概念整理 <a class="header-anchor" href="#_2、serverless的概念整理" aria-label="Permalink to &quot;2、serverless的概念整理&quot;">​</a></h3><ul><li>FaaS（Function as a Service，函数即服务）</li><li>BaaS（Backend as a Service，后端即服务）</li><li>PaaS（平台即服务）</li><li>LaaS（基础架构即服务）</li><li>SaaS（软件即服务）</li></ul><h4 id="广义serverless" tabindex="-1">广义serverless <a class="header-anchor" href="#广义serverless" aria-label="Permalink to &quot;广义serverless&quot;">​</a></h4><p>构建和运行软件时不需要关心服务器，简化配置代码运行环境的一种思想。</p><p>运行仍需要服务器，只是使用相应的框架大幅度减少了服务器相关的操作和概念。</p><h4 id="狭义的serverless" tabindex="-1">狭义的serverless <a class="header-anchor" href="#狭义的serverless" aria-label="Permalink to &quot;狭义的serverless&quot;">​</a></h4><p>狭义的serverless指某厂商构建的以serverless思想为核心的产品，本质上是FaaS产品和BaaS产品的组合。</p><h5 id="faas产品" tabindex="-1">FaaS产品 <a class="header-anchor" href="#faas产品" aria-label="Permalink to &quot;FaaS产品&quot;">​</a></h5><p>FaaS产品是一种为开发者提供函数代码运行环境的服务。实际上就是一个云厂商在自己的服务器上部署的一种以容器技术为基础的可弹性伸缩的云服务。用户将自己的服务以代码（具体服务）和yalm文件（描述运行环境）的形式提交给FaaS产品，而FaaS则会为用户的服务新建容器并根据用户提供的yalm文件部署对应的环境，进而运行代码，最终实现用户的服务。</p><p>FaaS专注于行为和计算，即FaaS并不会存储数据，只对接收数据进行处理并输出数据。每次运行服务，FaaS产品将会新建容器，以全新的环境运行代码，运行结束后销毁容器。因而如果在FaaS实例服务中定义全局变量，并不会继承到下一次该实例服务的运行中来，上一次运行时的变量已经随着容器的销毁而被销毁，本次运行的变量是被重新初始化出来的新变量。</p><h5 id="baas产品" tabindex="-1">BaaS产品 <a class="header-anchor" href="#baas产品" aria-label="Permalink to &quot;BaaS产品&quot;">​</a></h5><p>BaaS产品则是一种为服务实例提供存储能力的服务，通常以接口的形式提供服务。常见的BaaS产品有AWS DynameDB、阿里云表格存储、消息中间件等。</p><p>BaaS产品专注于存储信息，用户通过BaaS服务将数据存储至云端，以便下次使用。在FaaS实例服务中引入BaaS产品服务，以api的形式调用BaaS服务，这就是BaaS产品。</p>',16),i=[t];function o(n,c,h,d,v,S){return a(),s("div",null,i)}const u=e(l,[["render",o]]);export{p as __pageData,u as default};
