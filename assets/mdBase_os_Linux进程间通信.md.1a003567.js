import{_ as s,o as n,c as a,O as l}from"./chunks/framework.1eb88449.js";const C=JSON.parse('{"title":"共享内存实现Linux进程间通信","description":"","frontmatter":{"intro":"操作系统实验三，通过共享文件内存的方式实现进程间通信"},"headers":[],"relativePath":"mdBase/os/Linux进程间通信.md","lastUpdated":1684167986000}'),p={name:"mdBase/os/Linux进程间通信.md"},o=l(`<h1 id="共享内存实现linux进程间通信" tabindex="-1">共享内存实现Linux进程间通信 <a class="header-anchor" href="#共享内存实现linux进程间通信" aria-label="Permalink to &quot;共享内存实现Linux进程间通信&quot;">​</a></h1><h2 id="定义解析" tabindex="-1">定义解析 <a class="header-anchor" href="#定义解析" aria-label="Permalink to &quot;定义解析&quot;">​</a></h2><p>共享内存就是允许两个不相关的进程访问同一个逻辑内存。</p><p>共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。</p><p>但共享内存没有同步机制，因此在前一个进程结束读写操作前并没有防止第二个进程同时进行读写的措施，所以需要使用者自行创建同步机制，本次实验采用的同步机制为信号量机制。</p><h2 id="接口解析" tabindex="-1">接口解析 <a class="header-anchor" href="#接口解析" aria-label="Permalink to &quot;接口解析&quot;">​</a></h2><h3 id="shmget-函数" tabindex="-1">shmget()函数 <a class="header-anchor" href="#shmget-函数" aria-label="Permalink to &quot;shmget()函数&quot;">​</a></h3><p>作用：通过给定参数创建共享内存，并返回共享内存的标识符 (此处用ret表示) 。</p><p>原型声明</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmflg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数解析</p><ul><li>key -- key_t类型 本质类型为int (非0整数) ，shmget函数将根据key来生成ret，相当于ret的生成种子。</li><li>size -- size_t类型 本质类型为int 用来记录共享内存的大小 单位为字节。</li><li>shmflg -- int类型 表示权限值 (例 0644) 可与IPC_CREAT 或 IPC_EXCL等选项进行或操作 (例 IPC_CREAT|0644) <ul><li>IPC_CREAT 如果共享内存不存在，则创建一个共享内存，否则打开该内存。</li><li>IPC_EXCL 只有在共享内存不存在的时候，新的共享内存才建立，否则就产生错误。</li></ul></li><li>ret -- int类型 函数返回值 共享内存的标识符</li></ul><h3 id="shmat-函数" tabindex="-1">shmat()函数 <a class="header-anchor" href="#shmat-函数" aria-label="Permalink to &quot;shmat()函数&quot;">​</a></h3><p>作用：启动进程对该共享内存的访问，并把共享内存连接到当前进程的地址空间,返回一个指向共享内存第一个字节的指针(此处用ret表示)。</p><p>原型声明</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shm_id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">shm_addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shm_flg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数解析</p><ul><li>shm_id -- int类型 由shmget()函数返回的共享内存标识。</li><li>shm_addr -- 表示共享内存连接到当前进程的地址位置，通常为空，此时系统自动分配。</li><li>shm_flg -- int类型 一组标识位，通常为0。</li><li>ret -- 任意类型指针 指向共享内存第一个字节。</li></ul><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><h3 id="makefile-文件" tabindex="-1">Makefile 文件 <a class="header-anchor" href="#makefile-文件" aria-label="Permalink to &quot;Makefile 文件&quot;">​</a></h3><div class="language-cmake"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">all : init sender receiver</span></span>
<span class="line"><span style="color:#A6ACCD;">.PHONY : clean</span></span>
<span class="line"><span style="color:#A6ACCD;">init : init.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">	cc -pthread -o init init.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">sender : sender.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">	cc -pthread -o sender sender.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">receiver : receiver.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">	cc -pthread -o receiver receiver.o common.o</span></span>
<span class="line"><span style="color:#A6ACCD;">init.o : common.h           </span></span>
<span class="line"><span style="color:#A6ACCD;">sender.o : common.h</span></span>
<span class="line"><span style="color:#A6ACCD;">receiver.o : common.h</span></span>
<span class="line"><span style="color:#A6ACCD;">clean : </span></span>
<span class="line"><span style="color:#A6ACCD;">	rm  init </span></span>
<span class="line"><span style="color:#A6ACCD;">	rm  receiver</span></span>
<span class="line"><span style="color:#A6ACCD;">	rm  sender </span></span>
<span class="line"><span style="color:#A6ACCD;">	rm  *.o</span></span></code></pre></div><h3 id="common-h-文件" tabindex="-1">common.h 文件 <a class="header-anchor" href="#common-h-文件" aria-label="Permalink to &quot;common.h 文件&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">_COMMON_H_</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">_COMMON_H_</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdlib.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/stat.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">fcntl.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pthread.h</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">semaphore.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/types.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">unistd.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/ipc.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> MUTEX_NAME </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mutex_shm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> FULL_NAME  </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">full_shm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SHM_SIZE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#676E95;font-style:italic;"> //输入的最大长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KEY_NUM</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//返回共享内存的标识符</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetShmId</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SemInit</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SemDestroy</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">P</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">sem</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">sem</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span></code></pre></div><h3 id="common-c-文件" tabindex="-1">common.c 文件 <a class="header-anchor" href="#common-c-文件" aria-label="Permalink to &quot;common.c 文件&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetShmId</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> shmid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    shmid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">SHM_SIZE</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">IPC_CREAT</span><span style="color:#89DDFF;">|</span><span style="color:#F78C6C;">0666</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">shmid </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Receiver: Shmget Error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> shmid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* create mutex + semaphore</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* init those value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SemInit</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     /*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Funtion Prototype: </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *  sem_t *sem_open(const char *name, int oflag,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *                  mode_t mode, unsigned int value);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *                 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * name     : MUTEX_NAME    &quot;mutex_shm&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * oflag    : O_CREAT       Create and initialize it if not exist</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * mode_t   : file perssion -rw-r--r--</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * value    : 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MUTEX_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0644</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sem_open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FULL_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0644</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">perror</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sem_open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">EXIT_FAILURE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* close and unlink semaphore that we crated</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SemDestroy</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sem_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> mutexPtr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MUTEX_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">sem_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> fullPtr</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FULL_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* Destroy mutex */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mutexPtr</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                // int sem_close(sem_t *sem);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_unlink</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MUTEX_NAME</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">         // int sem_unlink(const char *name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* Destory full*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_close</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">fullPtr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_unlink</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FULL_NAME</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">P</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">semPtr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_wait</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">semPtr</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                   //int sem_wait(sem_t *sem);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">semPtr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">sem_post</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">semPtr</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                   //int sem_post(sem_t *sem);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="init-c-文件" tabindex="-1">init.c 文件 <a class="header-anchor" href="#init-c-文件" aria-label="Permalink to &quot;init.c 文件&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">key_t</span><span style="color:#F07178;"> key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> semid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          //semaphore id</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> shmid</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">          //shared memory id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* Create key*/</span></span>
<span class="line"><span style="color:#F07178;">    key </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> KEY_NUM</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* Initialize Semaphore*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SemInit</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* TODO Initialize Shared Memory*/</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">GetShmId</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">End of initialize</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="sender-c-文件" tabindex="-1">sender.c 文件 <a class="header-anchor" href="#sender-c-文件" aria-label="Permalink to &quot;sender.c 文件&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//key</span></span>
<span class="line"><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//shared memory</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> shmid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> shmptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">SHM_SIZE</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//semaphore </span></span>
<span class="line"><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> full</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mutex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    key </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> KEY_NUM</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    shmid  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GetShmId</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    shmptr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">shmid</span><span style="color:#89DDFF;">,NULL,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//semaphore init</span></span>
<span class="line"><span style="color:#F07178;">    full </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FULL_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    mutex </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MUTEX_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SaveMessage</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">P</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mutex</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">                       </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">shmptr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mutex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">full</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /*waiting for user to input message*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">scanf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">                  //input message from shell </span></span>
<span class="line"><span style="color:#89DDFF;">                                        </span><span style="color:#676E95;font-style:italic;">// TODO input a whole line</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SaveMessage</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Sender:  Process End</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="receiver-c-文件" tabindex="-1">receiver.c 文件 <a class="header-anchor" href="#receiver-c-文件" aria-label="Permalink to &quot;receiver.c 文件&quot;">​</a></h3><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">common.h</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//key</span></span>
<span class="line"><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//shared memory</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> shmid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> shmptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">SHM_SIZE</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//semaphore </span></span>
<span class="line"><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> full</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">sem_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> mutex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    key </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> KEY_NUM</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                  //init key</span></span>
<span class="line"><span style="color:#F07178;">    shmid  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">GetShmId</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">         // init shared memory</span></span>
<span class="line"><span style="color:#F07178;">    shmptr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">shmid</span><span style="color:#89DDFF;">,NULL,</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">       // attach segement to vitural ...?</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//semaphore init</span></span>
<span class="line"><span style="color:#F07178;">    full </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">FULL_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    mutex </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">sem_open</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MUTEX_NAME</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">O_CREAT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReadMessage</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">P</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">full</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">P</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mutex</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">                       </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">shmptr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">V</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mutex</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">Init</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /*waiting for user to input message*/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">ReadMessage</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Receiver : message is %s</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">SemDestroy</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Receiver :  Process End </span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><p><a href="https://blog.csdn.net/zyf2333/article/details/80246814" target="_blank" rel="noreferrer">Linux进程管理</a></p><p><a href="https://www.cnblogs.com/52php/p/5861372.html" target="_blank" rel="noreferrer">Linux进程间通信（六）</a></p>`,34),e=[o];function t(c,r,y,F,D,i){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{C as __pageData,m as default};
