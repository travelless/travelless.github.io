import{_ as s,o as a,c as l,O as n}from"./chunks/framework.1eb88449.js";const A=JSON.parse('{"title":"共享内存实现Linux进程间通信","description":"","frontmatter":{"intro":"操作系统实验三，通过共享文件内存的方式实现进程间通信"},"headers":[],"relativePath":"mdBase/os/Linux进程间通信.md","lastUpdated":1691921884000}'),t={name:"mdBase/os/Linux进程间通信.md"},e=n(`<h1 id="共享内存实现linux进程间通信" tabindex="-1">共享内存实现Linux进程间通信 <a class="header-anchor" href="#共享内存实现linux进程间通信" aria-label="Permalink to &quot;共享内存实现Linux进程间通信&quot;">​</a></h1><h2 id="定义解析" tabindex="-1">定义解析 <a class="header-anchor" href="#定义解析" aria-label="Permalink to &quot;定义解析&quot;">​</a></h2><p>共享内存就是允许两个不相关的进程访问同一个逻辑内存。</p><p>共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。</p><p>但共享内存没有同步机制，因此在前一个进程结束读写操作前并没有防止第二个进程同时进行读写的措施，所以需要使用者自行创建同步机制，本次实验采用的同步机制为信号量机制。</p><h2 id="接口解析" tabindex="-1">接口解析 <a class="header-anchor" href="#接口解析" aria-label="Permalink to &quot;接口解析&quot;">​</a></h2><h3 id="shmget-函数" tabindex="-1">shmget()函数 <a class="header-anchor" href="#shmget-函数" aria-label="Permalink to &quot;shmget()函数&quot;">​</a></h3><p>作用：通过给定参数创建共享内存，并返回共享内存的标识符 (此处用ret表示) 。</p><p>原型声明</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmget</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">key_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shmflg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数解析</p><ul><li>key -- key_t类型 本质类型为int (非0整数) ，shmget函数将根据key来生成ret，相当于ret的生成种子。</li><li>size -- size_t类型 本质类型为int 用来记录共享内存的大小 单位为字节。</li><li>shmflg -- int类型 表示权限值 (例 0644) 可与IPC_CREAT 或 IPC_EXCL等选项进行或操作 (例 IPC_CREAT|0644) <ul><li>IPC_CREAT 如果共享内存不存在，则创建一个共享内存，否则打开该内存。</li><li>IPC_EXCL 只有在共享内存不存在的时候，新的共享内存才建立，否则就产生错误。</li></ul></li><li>ret -- int类型 函数返回值 共享内存的标识符</li></ul><h3 id="shmat-函数" tabindex="-1">shmat()函数 <a class="header-anchor" href="#shmat-函数" aria-label="Permalink to &quot;shmat()函数&quot;">​</a></h3><p>作用：启动进程对该共享内存的访问，并把共享内存连接到当前进程的地址空间,返回一个指向共享内存第一个字节的指针(此处用ret表示)。</p><p>原型声明</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">shmat</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shm_id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">shm_addr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shm_flg</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>参数解析</p><ul><li>shm_id -- int类型 由shmget()函数返回的共享内存标识。</li><li>shm_addr -- 表示共享内存连接到当前进程的地址位置，通常为空，此时系统自动分配。</li><li>shm_flg -- int类型 一组标识位，通常为0。</li><li>ret -- 任意类型指针 指向共享内存第一个字节。</li></ul><h3 id="shmdt-函数" tabindex="-1">shmdt()函数 <a class="header-anchor" href="#shmdt-函数" aria-label="Permalink to &quot;shmdt()函数&quot;">​</a></h3><p>作用：断开与共享内存附加点的地址，禁止本进程访问此片共享内存</p><p>原型声明</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/types.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sys/shm.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shmdt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">shmaddr</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>参数解析</p><ul><li>shmaddr：连接的共享内存的起始地址</li></ul><p>附加说明</p><p>本函数调用并不删除所指定的共享内存区，而只是将先前用shmat函数连接（attach）好的共享内存脱离（detach）目前的进程</p><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><p><a href="https://blog.csdn.net/zyf2333/article/details/80246814" target="_blank" rel="noreferrer">Linux进程管理</a></p><p><a href="https://www.cnblogs.com/52php/p/5861372.html" target="_blank" rel="noreferrer">Linux进程间通信（六）</a></p>`,29),o=[e];function p(c,r,i,y,h,C){return a(),l("div",null,o)}const d=s(t,[["render",p]]);export{A as __pageData,d as default};
