import{_ as t,o as s,c as r,z as a,a as e}from"./chunks/framework.1eb88449.js";const j=JSON.parse('{"title":"数组","description":"","frontmatter":{"intro":"本篇主要讨论v8引擎下JavaScript中的数据结构。"},"headers":[],"relativePath":"mdBase/IT/js中的数据结构.md","lastUpdated":null}'),o={name:"mdBase/IT/js中的数据结构.md"},n=a("h2",{id:"前言",tabindex:"-1"},[e("前言 "),a("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1),c=a("p",null,"JavaScript的历史极其复杂，版本极多，想要逐个讨论是很困难的一件事，本文只针对v8引擎下的JavaScript进行讨论，原因大概有两点：一是作者在日常使用JavaScript较多却从未了解过其内部数据结构的实现原理，二是以JavaScript为样本，熟悉并了解一门动态语言的数据结构定义方法。",-1),i=a("h1",{id:"数组",tabindex:"-1"},[e("数组 "),a("a",{class:"header-anchor",href:"#数组","aria-label":'Permalink to "数组"'},"​")],-1),_=a("p",null,"​ JavaScript中的数组并不是传统意义中的数组。与静态类型语言不同，在js这种动态类型语言中，一个数组可以存放多种类型的数据。",-1),d=a("p",null,"​ 例如c语言中的 int类型数组只能存放整形，char类型数组只能存放字符。而在js中，数组并不受类型限制，在数组中可能同时存在 number string object等多种类型的数据。",-1),l=a("p",null,"​",-1),p=[n,c,i,_,d,l];function h(m,u,v,f,J,S){return s(),r("div",null,p)}const x=t(o,[["render",h]]);export{j as __pageData,x as default};
