import{_ as e,o as a,c as t,V as s}from"./chunks/framework.069143a0.js";const m=JSON.parse('{"title":"前端开发-vue3的使用","description":"","frontmatter":{"title":"前端开发-vue3的使用","tags":["前端"],"date":"2023-01-10","intro":"Vue3的入门教程，在不求甚解的前提下快速学会基于Vue3框架的开发。"},"headers":[],"relativePath":"mdBase/前端开发-vue3的使用.md","lastUpdated":null}'),n={name:"mdBase/前端开发-vue3的使用.md"},r=s('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本篇主要围绕Vue3的使用展开，有关yarn和vite等开发环境的问题不再一一赘述。</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><h3 id="初始结构" tabindex="-1">初始结构 <a class="header-anchor" href="#初始结构" aria-label="Permalink to &quot;初始结构&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─.vscode</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─node_modules</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─public</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─src											------工作目录</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─assets											------存放图片等静态资源</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─components										------存放vue组件</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─App.vue										------vue项目根组件</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─main.ts										</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─style.css										</span></span>\n<span class="line"><span style="color:#A6ACCD;">|  ├─vite-env.d.ts</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─.gitignore</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─index.html</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─package.json</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─README.md</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─tsconfig.json</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─tsconfig.node.json</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─vite.confige.ts</span></span></code></pre></div><p>本篇的主讲内容是上述结构中做了注解的部分，若对其余目录结构感兴趣，这里有一些优秀的博客</p><p><a href="https://juejin.cn/post/6931234988281036807" target="_blank" rel="noreferrer">花五分钟重新认知 Vue 项目 src 目录</a></p><p><a href="https://www.runoob.com/vue3/vue3-directory-structure.html" target="_blank" rel="noreferrer">菜鸟教程</a></p><h2 id="开发基础" tabindex="-1">开发基础 <a class="header-anchor" href="#开发基础" aria-label="Permalink to &quot;开发基础&quot;">​</a></h2><h3 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h3><h4 id="插值语法" tabindex="-1"><a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation" target="_blank" rel="noreferrer">插值语法</a> <a class="header-anchor" href="#插值语法" aria-label="Permalink to &quot;[插值语法](https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation)&quot;">​</a></h4><h4 id="attribute-绑定及简写" tabindex="-1"><a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings" target="_blank" rel="noreferrer">Attribute 绑定及简写</a> <a class="header-anchor" href="#attribute-绑定及简写" aria-label="Permalink to &quot;[Attribute 绑定及简写](https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings)&quot;">​</a></h4><h3 id="组合式开发-setup" tabindex="-1">组合式开发 - - setup <a class="header-anchor" href="#组合式开发-setup" aria-label="Permalink to &quot;组合式开发 - - setup&quot;">​</a></h3><p><code>setup()</code> 钩子是在组件中使用组合式 API 的入口，即只有在 <code>setup()</code> 函数内部，我们才可以使用组合式API进行开发。</p><p>当你使用混合式开发时(同时使用组合式开发和选项式开发)，你可能会用到 <code>setup()</code> 函数，在本篇中反而会很少看到该函数，这是因为Vue3为我们准备了一个很好用的 <code>setup</code> 语法糖，即在 <code>script</code> 标签中写入 <code>setup</code> ，随后我们在 <code>script</code> 标签中的代码都将被视为组合式。</p><h3 id="响应式基础" tabindex="-1">响应式基础 <a class="header-anchor" href="#响应式基础" aria-label="Permalink to &quot;响应式基础&quot;">​</a></h3><h4 id="响应式apiref-和-reactive" tabindex="-1">响应式API<code>ref</code> 和 <code>reactive</code> <a class="header-anchor" href="#响应式apiref-和-reactive" aria-label="Permalink to &quot;响应式API`ref` 和 `reactive`&quot;">​</a></h4><p>由<code>ref</code> 和 <code>reactive</code>注册的变量被称为响应式变量。vue会主动监测响应式状态的变量，当他们发生变化时，与其相关的一切都将跟着变化。</p><p>你可以在 <a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#reactivity-fundamentals" target="_blank" rel="noreferrer">vue文档</a> 中找到关于<code>ref</code>和<code>reactive</code>的一切。</p><h4 id="ref-和-reactive的区别" tabindex="-1"><code>ref</code> 和 <code>reactive</code>的区别 <a class="header-anchor" href="#ref-和-reactive的区别" aria-label="Permalink to &quot;`ref` 和 `reactive`的区别&quot;">​</a></h4><p><code>reactive</code>只能声明对象，不能声明具体的值。</p><p><code>ref</code>可以响应式声明任何变量，包括值、数组、对象等。</p><h3 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">​</a></h3><h4 id="v-if和v-show" tabindex="-1"><code>v-if</code>和<code>v-show</code> <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;`v-if`和`v-show`&quot;">​</a></h4><p>作用：条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><p>衍生：<code>v-else</code> 、 <code>v-else-if</code></p><h4 id="区别" tabindex="-1"><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-if-vs-v-show" target="_blank" rel="noreferrer">区别</a> <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;[区别](https://cn.vuejs.org/guide/essentials/conditional.html#v-if-vs-v-show)&quot;">​</a></h4><h3 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h3><h4 id="事件监听及其缩写" tabindex="-1">事件监听及其缩写 <a class="header-anchor" href="#事件监听及其缩写" aria-label="Permalink to &quot;事件监听及其缩写&quot;">​</a></h4><p><code>v-on</code> 和 <code>@</code> 都可以用来监听dom事件</p><p><a href="https://cn.vuejs.org/guide/essentials/event-handling.html#event-handling" target="_blank" rel="noreferrer">官方文档</a></p><h3 id="props" tabindex="-1"><a href="https://cn.vuejs.org/guide/components/props.html" target="_blank" rel="noreferrer"><code>Props</code></a> <a class="header-anchor" href="#props" aria-label="Permalink to &quot;[`Props`](https://cn.vuejs.org/guide/components/props.html)&quot;">​</a></h3><h2 id="基于组件库的开发实践" tabindex="-1">基于组件库的开发实践 <a class="header-anchor" href="#基于组件库的开发实践" aria-label="Permalink to &quot;基于组件库的开发实践&quot;">​</a></h2><h3 id="elementplus组件库" tabindex="-1"><code>elementPlus</code>组件库 <a class="header-anchor" href="#elementplus组件库" aria-label="Permalink to &quot;`elementPlus`组件库&quot;">​</a></h3><p><a href="https://element-plus.org/zh-CN/" target="_blank" rel="noreferrer"><code>elementPlus</code></a>是一个非常强大的组件库，他基于Vue3为我们提供了很多实用的模板化组件，大大加快了开发速度。</p><p><a href="https://element-plus.org/zh-CN/guide/installation.html#%E5%AE%89%E8%A3%85" target="_blank" rel="noreferrer">安装指南</a></p><p><a href="https://element-plus.org/zh-CN/guide/quickstart.html#%E5%AE%8C%E6%95%B4%E5%BC%95%E5%85%A5" target="_blank" rel="noreferrer">引入指南</a></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',38),o=[r];function l(i,c,p,d,h,u){return a(),t("div",null,o)}const b=e(n,[["render",l]]);export{m as __pageData,b as default};
